services:
  # PostgreSQL database service
  pgvector:
    image: pgvector/pgvector:0.8.0-pg17
    container_name: pgvector
    ports:
      - "5432:5432"
    volumes:
      - pgvector:/var/lib/postgresql/data
    env_file:
      - ./env/.env.postgres
    networks:
      - backend
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s

  # Qdrant vector search service
  qdrant:
    image: qdrant/qdrant:dev
    container_name: qdrant
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/storage
    networks:
      - backend
    restart: always

  #Prometheus monitoring service
  prometheus:
    image: prom/prometheus:v3.4.0
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - backend
    restart: always
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'



  # PosgreSql Exporter service for monitoring
  postgres_exporter:
    image: prometheuscommunity/postgres-exporter:master
    container_name: postgres_exporter
    ports:
      - "9187:9187"
    env_file:
      - ./env/.env.postgres-exporter
    depends_on:
      - pgvector
    networks:
      - backend
    restart: always

networks:
  backend:
    driver: bridge

volumes:
  fastapi_data:
  pgvector:
  qdrant_data:
  prometheus_data:
  grafana_data:

